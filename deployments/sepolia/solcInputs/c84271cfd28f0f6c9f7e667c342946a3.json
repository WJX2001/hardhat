{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.27;\n\n// 1. 创建一个收款函数\n// 2. 记录投资人并且查看\n// 3. 在锁定期内，达到目标值，生产商可以提款\n// 4. 在锁定期内，没有达到目标值，投资人可以退款\nimport {AggregatorV3Interface} from '@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol';\n\ncontract FundMe {\n    mapping(address => uint256) public funderToAmount;\n\n    // 相当于100美元\n    uint256 MINIMUM_VALUE = 100 * 10 ** 18; // wei\n\n    AggregatorV3Interface internal dataFeed;\n\n    // 设定目标值\n    uint256 constant TARGET = 1000 * 10 ** 18;\n\n    address public owner;\n\n    uint256 deploymentTimestamp;\n\n    uint256 lockTime;\n\n    address erc20Addr;\n\n    bool public getFundSuccess = false;\n\n    constructor(uint256 _lockTime, address dataFeedAddr) {\n        dataFeed = AggregatorV3Interface(dataFeedAddr);\n        // dataFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        owner = msg.sender;\n        deploymentTimestamp = block.timestamp;\n        lockTime = _lockTime;\n    }\n\n    function fund() external payable {\n        require(convertEthToUsd(msg.value) >= MINIMUM_VALUE, 'send more ETH');\n        require(\n            block.timestamp < deploymentTimestamp + lockTime,\n            'window is closed'\n        );\n        funderToAmount[msg.sender] = msg.value;\n    }\n\n    function getChainlinkDataFeedLatestAnswer() public view returns (int256) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    function convertEthToUsd(\n        uint256 ethAmount\n    ) internal view returns (uint256) {\n        uint256 ethPrice = uint256(getChainlinkDataFeedLatestAnswer());\n        return (ethAmount * ethPrice) / (10 ** 8);\n        // 前面是 10的18此方 后面是 10的八次方 所以需要除以10的八次方\n        // ETH / USD precision = 10 ** 8\n        // X / ETH presion = 10 ** 18\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function getFund() external onlyOwner windowClosed {\n        require(\n            convertEthToUsd(address(this).balance) >= TARGET /*wei*/,\n            'Target is not reached'\n        );\n        bool success;\n        (success, ) = payable(msg.sender).call{value: address(this).balance}(\n            ''\n        );\n        require(success, 'transfer tx failed');\n        funderToAmount[msg.sender] = 0;\n        getFundSuccess = true;\n    }\n\n    function refund() external windowClosed {\n        require(\n            convertEthToUsd(address(this).balance) < TARGET,\n            'target is reached'\n        );\n        require(funderToAmount[msg.sender] != 0, 'there is no fund for you');\n\n        bool success;\n        (success, ) = payable(msg.sender).call{\n            value: funderToAmount[msg.sender]\n        }('');\n        require(success, 'transfer tx failed');\n        funderToAmount[msg.sender] = 0;\n    }\n\n    function setFunderToAmount(\n        address funder,\n        uint256 amountToUpdate\n    ) external {\n        require(\n            msg.sender == erc20Addr,\n            'you do not have permission to call this function'\n        );\n        funderToAmount[funder] = amountToUpdate;\n    }\n\n    function setErc20Addr(address _erc20Addr) public onlyOwner {\n        erc20Addr = _erc20Addr;\n    }\n\n    modifier windowClosed() {\n        require(\n            block.timestamp >= deploymentTimestamp + lockTime,\n            'window is closed'\n        );\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, 'not owner');\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}